"""
Script de configuration et d'installation pour PromptMaster.
Lance l'installation des d√©pendances et initialise la base de donn√©es.
"""

import subprocess
import sys
import os


def check_python_version():
    """V√©rifie que la version de Python est compatible."""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 ou sup√©rieur est requis")
        print(f"   Votre version : Python {version.major}.{version.minor}.{version.micro}")
        return False
    print(f"‚úì Python {version.major}.{version.minor}.{version.micro} d√©tect√©")
    return True


def install_dependencies():
    """Installe les d√©pendances depuis requirements.txt."""
    print("\nüì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úì D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de l'installation des d√©pendances")
        return False


def initialize_database():
    """Initialise la base de donn√©es avec des exemples."""
    print("\nüóÑÔ∏è Initialisation de la base de donn√©es...")
    try:
        from database import DatabaseManager, populate_sample_data
        
        db = DatabaseManager()
        
        # V√©rifier si la base est vide
        all_prompts = db.get_all_prompts()
        if len(all_prompts) == 0:
            print("   Ajout de prompts d'exemple...")
            populate_sample_data()
        else:
            print(f"   Base de donn√©es d√©j√† initialis√©e ({len(all_prompts)} prompts)")
        
        print("‚úì Base de donn√©es pr√™te")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base : {e}")
        return False


def test_imports():
    """Teste que tous les modules peuvent √™tre import√©s."""
    print("\nüß™ V√©rification des imports...")
    
    modules = [
        ("PySide6.QtWidgets", "PySide6"),
        ("pynput.keyboard", "pynput"),
        ("sqlite3", "sqlite3 (int√©gr√©)")
    ]
    
    all_ok = True
    for module_name, display_name in modules:
        try:
            __import__(module_name)
            print(f"   ‚úì {display_name}")
        except ImportError:
            print(f"   ‚ùå {display_name} - Installation requise")
            all_ok = False
    
    return all_ok


def create_startup_script():
    """Cr√©e un script batch pour d√©marrer facilement l'application."""
    print("\nüìù Cr√©ation du script de d√©marrage...")
    
    batch_content = f"""@echo off
echo Demarrage de PromptMaster...
cd /d "{os.getcwd()}"

REM Activer l'environnement virtuel si pr√©sent
if exist venv\\Scripts\\activate.bat (
    call venv\\Scripts\\activate.bat
)

REM Lancer l'application
python main.py

pause
"""
    
    try:
        with open("start_promptmaster.bat", "w", encoding="utf-8") as f:
            f.write(batch_content)
        print("‚úì Script 'start_promptmaster.bat' cr√©√©")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du script : {e}")
        return False


def main():
    """Point d'entr√©e du script de setup."""
    print("="*60)
    print("üéØ Configuration de PromptMaster")
    print("="*60)
    
    # √âtape 1 : V√©rifier Python
    if not check_python_version():
        sys.exit(1)
    
    # √âtape 2 : Installer les d√©pendances
    if not install_dependencies():
        sys.exit(1)
    
    # √âtape 3 : Tester les imports
    if not test_imports():
        print("\n‚ö†Ô∏è Certains modules ne sont pas disponibles.")
        print("   Ex√©cutez : pip install -r requirements.txt")
        sys.exit(1)
    
    # √âtape 4 : Initialiser la base
    initialize_database()
    
    # √âtape 5 : Cr√©er le script de d√©marrage
    create_startup_script()
    
    # R√©sum√©
    print("\n" + "="*60)
    print("‚úÖ Configuration termin√©e avec succ√®s !")
    print("="*60)
    print("\nüìö Prochaines √©tapes :")
    print("   1. Lancez l'application : python main.py")
    print("   2. Ou utilisez : start_promptmaster.bat")
    print("   3. Appuyez sur Ctrl + Space pour afficher l'interface")
    print("\nüìñ Documentation compl√®te dans README.md")
    print("="*60 + "\n")


if __name__ == "__main__":
    main()
