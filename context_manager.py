"""
Gestionnaire de contexte pour PromptMaster.
D√©tecte l'application active, capture le texte s√©lectionn√©, et fournit des recommandations contextuelles.
"""

import pyperclip
import time
from typing import Optional, Dict, List
from datetime import datetime

try:
    import win32gui
    import win32process
    import psutil
    WINDOWS_SUPPORT = True
except ImportError:
    WINDOWS_SUPPORT = False
    print("‚ö†Ô∏è win32gui non disponible. Installez pywin32 pour le support complet du contexte.")

try:
    from pynput.keyboard import Key, Controller as KeyboardController
    PYNPUT_AVAILABLE = True
except ImportError:
    PYNPUT_AVAILABLE = False


class ContextManager:
    """G√®re le contexte de l'utilisateur pour des recommandations intelligentes."""
    
    def __init__(self, db_manager=None):
        """
        Initialise le gestionnaire de contexte.
        
        Args:
            db_manager: Instance de DatabaseManager pour les recommandations
        """
        self.db = db_manager
        self.keyboard = KeyboardController() if PYNPUT_AVAILABLE else None
        
        # Mapping d'applications vers cat√©gories
        self.app_categories = {
            'code.exe': 'D√©veloppement',
            'vscode.exe': 'D√©veloppement',
            'pycharm64.exe': 'D√©veloppement',
            'sublime_text.exe': 'D√©veloppement',
            'notepad++.exe': 'D√©veloppement',
            
            'chrome.exe': 'Navigation',
            'firefox.exe': 'Navigation',
            'msedge.exe': 'Navigation',
            'brave.exe': 'Navigation',
            
            'slack.exe': 'Communication',
            'teams.exe': 'Communication',
            'discord.exe': 'Communication',
            
            'notion.exe': 'Productivit√©',
            'onenote.exe': 'Productivit√©',
            'obsidian.exe': 'Productivit√©',
            
            'word.exe': 'R√©daction',
            'winword.exe': 'R√©daction',
            'excel.exe': 'R√©daction',
            
            'figma.exe': 'Design',
            'photoshop.exe': 'Design',
        }
        
        # Mots-cl√©s pour d√©tecter le type de site web
        self.web_keywords = {
            'github': ['D√©veloppement', 'git'],
            'stackoverflow': ['D√©veloppement', 'code'],
            'linkedin': ['Business', 'professionnel'],
            'twitter': ['Marketing', 'social'],
            'facebook': ['Marketing', 'social'],
            'gmail': ['Communication', 'email'],
            'outlook': ['Communication', 'email'],
            'notion': ['Productivit√©', 'notes'],
            'figma': ['Design', 'ui'],
            'canva': ['Design', 'marketing'],
            'docs.google': ['R√©daction', 'document'],
            'youtube': ['Vid√©o', 'contenu'],
        }
    
    def get_active_window_info(self) -> Dict[str, str]:
        """
        R√©cup√®re les informations sur la fen√™tre active.
        
        Returns:
            Dict avec app_name, window_title, process_name, category
        """
        if not WINDOWS_SUPPORT:
            return {
                'app_name': 'Unknown',
                'window_title': '',
                'process_name': 'unknown',
                'category': None
            }
        
        try:
            # Obtenir le handle de la fen√™tre active
            hwnd = win32gui.GetForegroundWindow()
            
            # Obtenir le titre de la fen√™tre
            window_title = win32gui.GetWindowText(hwnd)
            
            # Obtenir le PID du processus
            _, pid = win32process.GetWindowThreadProcessId(hwnd)
            
            # Obtenir le nom du processus
            try:
                process = psutil.Process(pid)
                process_name = process.name()
                app_name = process.name().replace('.exe', '').title()
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                process_name = 'unknown'
                app_name = 'Unknown'
            
            # D√©terminer la cat√©gorie
            category = self.app_categories.get(process_name.lower())
            
            # Analyse du titre pour les navigateurs
            if category == 'Navigation':
                for keyword, tags in self.web_keywords.items():
                    if keyword in window_title.lower():
                        category = tags[0]
                        break
            
            return {
                'app_name': app_name,
                'window_title': window_title,
                'process_name': process_name,
                'category': category,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            print(f"Erreur lors de la r√©cup√©ration du contexte : {e}")
            return {
                'app_name': 'Unknown',
                'window_title': '',
                'process_name': 'unknown',
                'category': None
            }
    
    def capture_selected_text(self) -> Optional[str]:
        """
        Capture le texte actuellement s√©lectionn√© dans n'importe quelle application.
        Utilise Ctrl+C pour copier temporairement la s√©lection.
        
        Returns:
            Le texte s√©lectionn√© ou None si aucun texte n'est s√©lectionn√©
        """
        if not self.keyboard:
            return None
        
        try:
            # Sauvegarder le presse-papiers actuel
            old_clipboard = ""
            try:
                old_clipboard = pyperclip.paste()
            except:
                pass
            
            # Vider le presse-papiers
            pyperclip.copy("")
            
            # Petit d√©lai pour s'assurer que le presse-papiers est vide
            time.sleep(0.1)
            
            # Cr√©er un nouveau controller keyboard temporaire pour √©viter les conflits
            temp_keyboard = KeyboardController()
            
            # Simuler Ctrl+C pour copier la s√©lection
            temp_keyboard.press(Key.ctrl)
            time.sleep(0.05)
            temp_keyboard.press('c')
            temp_keyboard.release('c')
            temp_keyboard.release(Key.ctrl)
            
            # Attendre que le texte soit copi√©
            time.sleep(0.2)
            
            # R√©cup√©rer le texte copi√©
            selected_text = pyperclip.paste()
            
            # Restaurer l'ancien presse-papiers
            if old_clipboard:
                time.sleep(0.05)
                pyperclip.copy(old_clipboard)
            
            # Retourner le texte seulement s'il n'est pas vide et diff√©rent de l'ancien
            if selected_text and selected_text.strip() and selected_text != old_clipboard:
                return selected_text.strip()
            
            return None
            
        except Exception as e:
            print(f"Erreur lors de la capture du texte : {e}")
            return None
    
    def get_contextual_prompts(self, limit: int = 10) -> List[tuple]:
        """
        R√©cup√®re les prompts les plus pertinents selon le contexte actuel.
        
        Args:
            limit: Nombre maximum de prompts √† retourner
            
        Returns:
            Liste de tuples (id, title, content, category, tags, usage_count)
        """
        if not self.db:
            return []
        
        context = self.get_active_window_info()
        category = context.get('category')
        window_title = context.get('window_title', '').lower()
        
        all_prompts = self.db.get_all_prompts()
        
        # Scoring des prompts
        scored_prompts = []
        for prompt in all_prompts:
            prompt_id, title, content, prompt_cat, tags, usage_count = prompt
            score = usage_count * 2  # Score de base avec usage_count
            
            # Bonus si la cat√©gorie correspond
            if category and prompt_cat == category:
                score += 50
            
            # Bonus si des mots du titre de la fen√™tre sont dans le titre ou tags
            if tags:
                for word in window_title.split():
                    if len(word) > 3:  # Mots significatifs seulement
                        if word in title.lower() or word in tags.lower():
                            score += 10
            
            # Bonus si utilis√© r√©cemment (usage_count √©lev√©)
            if usage_count > 5:
                score += 20
            
            scored_prompts.append((score, prompt))
        
        # Trier par score d√©croissant
        scored_prompts.sort(key=lambda x: x[0], reverse=True)
        
        # Retourner les meilleurs prompts
        return [prompt for score, prompt in scored_prompts[:limit]]
    
    def get_context_summary(self) -> str:
        """
        G√©n√®re un r√©sum√© textuel du contexte actuel.
        
        Returns:
            String d√©crivant le contexte
        """
        context = self.get_active_window_info()
        app_name = context.get('app_name', 'Unknown')
        category = context.get('category', 'G√©n√©ral')
        window_title = context.get('window_title', '')
        
        if window_title:
            # Limiter la longueur du titre
            if len(window_title) > 50:
                window_title = window_title[:47] + "..."
            return f"üìç {app_name} ‚Ä¢ {category or 'G√©n√©ral'} ‚Ä¢ {window_title}"
        else:
            return f"üìç {app_name} ‚Ä¢ {category or 'G√©n√©ral'}"
    
    def extract_keywords_from_text(self, text: str, max_keywords: int = 5) -> List[str]:
        """
        Extrait des mots-cl√©s d'un texte pour sugg√©rer des tags.
        
        Args:
            text: Le texte √† analyser
            max_keywords: Nombre maximum de mots-cl√©s
            
        Returns:
            Liste de mots-cl√©s
        """
        # Mots communs √† ignorer
        stopwords = {
            'le', 'la', 'les', 'un', 'une', 'des', 'de', 'du', 'et', 'ou', 'mais',
            'est', 'sont', 'a', 'ont', 'pour', 'dans', 'sur', 'avec', 'sans',
            'the', 'a', 'an', 'and', 'or', 'but', 'is', 'are', 'was', 'were',
            'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'
        }
        
        # Nettoyer et d√©couper le texte
        words = text.lower().replace('\n', ' ').split()
        
        # Compter les occurrences
        word_count = {}
        for word in words:
            # Nettoyer le mot
            word = ''.join(c for c in word if c.isalnum())
            # Ignorer les mots courts et les stopwords
            if len(word) > 3 and word not in stopwords:
                word_count[word] = word_count.get(word, 0) + 1
        
        # Trier par fr√©quence
        sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)
        
        # Retourner les mots les plus fr√©quents
        return [word for word, count in sorted_words[:max_keywords]]
    
    def suggest_category_from_context(self) -> Optional[str]:
        """
        Sugg√®re une cat√©gorie bas√©e sur le contexte actuel.
        
        Returns:
            Nom de la cat√©gorie sugg√©r√©e ou None
        """
        context = self.get_active_window_info()
        return context.get('category')
    
    def suggest_tags_from_text(self, text: str) -> str:
        """
        Sugg√®re des tags bas√©s sur le texte et le contexte.
        
        Args:
            text: Le texte du prompt
            
        Returns:
            String de tags s√©par√©s par des virgules
        """
        keywords = self.extract_keywords_from_text(text, max_keywords=5)
        
        # Ajouter le contexte de l'application
        context = self.get_active_window_info()
        app_name = context.get('app_name', '').lower()
        
        if app_name and app_name not in keywords:
            keywords.insert(0, app_name)
        
        return ','.join(keywords[:5])


# Fonction utilitaire pour installer pywin32 si n√©cessaire
def check_dependencies():
    """V√©rifie et sugg√®re l'installation des d√©pendances manquantes."""
    missing = []
    
    if not WINDOWS_SUPPORT:
        missing.append('pywin32')
    
    if not PYNPUT_AVAILABLE:
        missing.append('pynput')
    
    if missing:
        print("\n‚ö†Ô∏è D√©pendances manquantes pour les fonctionnalit√©s avanc√©es :")
        for dep in missing:
            print(f"   - {dep}")
        print("\nInstallez-les avec :")
        print(f"   pip install {' '.join(missing)}")
        return False
    
    return True


if __name__ == "__main__":
    # Test du module
    print("=== Test du Context Manager ===\n")
    
    if check_dependencies():
        cm = ContextManager()
        
        print("üìç Contexte actuel :")
        context = cm.get_active_window_info()
        for key, value in context.items():
            if key != 'timestamp':
                print(f"   {key}: {value}")
        
        print(f"\n{cm.get_context_summary()}")
        
        print("\nüîç Test de capture de texte s√©lectionn√© :")
        print("   S√©lectionnez du texte et appuyez sur Entr√©e...")
        input()
        
        selected = cm.capture_selected_text()
        if selected:
            print(f"   ‚úì Texte captur√© : {selected[:100]}...")
            
            keywords = cm.extract_keywords_from_text(selected)
            print(f"   Mots-cl√©s : {', '.join(keywords)}")
        else:
            print("   ‚úó Aucun texte s√©lectionn√©")
